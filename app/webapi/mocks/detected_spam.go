// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/umputun/tg-spam/app/storage"
	"sync"
)

// DetectedSpamMock is a mock implementation of webapi.DetectedSpam.
//
//	func TestSomethingThatUsesDetectedSpam(t *testing.T) {
//
//		// make and configure a mocked webapi.DetectedSpam
//		mockedDetectedSpam := &DetectedSpamMock{
//			ReadFunc: func() ([]storage.DetectedSpamInfo, error) {
//				panic("mock out the Read method")
//			},
//			SetAddedToSamplesFlagFunc: func(id int64) error {
//				panic("mock out the SetAddedToSamplesFlag method")
//			},
//		}
//
//		// use mockedDetectedSpam in code that requires webapi.DetectedSpam
//		// and then make assertions.
//
//	}
type DetectedSpamMock struct {
	// ReadFunc mocks the Read method.
	ReadFunc func() ([]storage.DetectedSpamInfo, error)

	// SetAddedToSamplesFlagFunc mocks the SetAddedToSamplesFlag method.
	SetAddedToSamplesFlagFunc func(id int64) error

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
		}
		// SetAddedToSamplesFlag holds details about calls to the SetAddedToSamplesFlag method.
		SetAddedToSamplesFlag []struct {
			// ID is the id argument value.
			ID int64
		}
	}
	lockRead                  sync.RWMutex
	lockSetAddedToSamplesFlag sync.RWMutex
}

// Read calls ReadFunc.
func (mock *DetectedSpamMock) Read() ([]storage.DetectedSpamInfo, error) {
	if mock.ReadFunc == nil {
		panic("DetectedSpamMock.ReadFunc: method is nil but DetectedSpam.Read was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc()
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedDetectedSpam.ReadCalls())
func (mock *DetectedSpamMock) ReadCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// ResetReadCalls reset all the calls that were made to Read.
func (mock *DetectedSpamMock) ResetReadCalls() {
	mock.lockRead.Lock()
	mock.calls.Read = nil
	mock.lockRead.Unlock()
}

// SetAddedToSamplesFlag calls SetAddedToSamplesFlagFunc.
func (mock *DetectedSpamMock) SetAddedToSamplesFlag(id int64) error {
	if mock.SetAddedToSamplesFlagFunc == nil {
		panic("DetectedSpamMock.SetAddedToSamplesFlagFunc: method is nil but DetectedSpam.SetAddedToSamplesFlag was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockSetAddedToSamplesFlag.Lock()
	mock.calls.SetAddedToSamplesFlag = append(mock.calls.SetAddedToSamplesFlag, callInfo)
	mock.lockSetAddedToSamplesFlag.Unlock()
	return mock.SetAddedToSamplesFlagFunc(id)
}

// SetAddedToSamplesFlagCalls gets all the calls that were made to SetAddedToSamplesFlag.
// Check the length with:
//
//	len(mockedDetectedSpam.SetAddedToSamplesFlagCalls())
func (mock *DetectedSpamMock) SetAddedToSamplesFlagCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockSetAddedToSamplesFlag.RLock()
	calls = mock.calls.SetAddedToSamplesFlag
	mock.lockSetAddedToSamplesFlag.RUnlock()
	return calls
}

// ResetSetAddedToSamplesFlagCalls reset all the calls that were made to SetAddedToSamplesFlag.
func (mock *DetectedSpamMock) ResetSetAddedToSamplesFlagCalls() {
	mock.lockSetAddedToSamplesFlag.Lock()
	mock.calls.SetAddedToSamplesFlag = nil
	mock.lockSetAddedToSamplesFlag.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *DetectedSpamMock) ResetCalls() {
	mock.lockRead.Lock()
	mock.calls.Read = nil
	mock.lockRead.Unlock()

	mock.lockSetAddedToSamplesFlag.Lock()
	mock.calls.SetAddedToSamplesFlag = nil
	mock.lockSetAddedToSamplesFlag.Unlock()
}
