// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/umputun/tg-spam/lib/approved"
	"sync"
)

// UserStorageMock is a mock implementation of tgspam.UserStorage.
//
//	func TestSomethingThatUsesUserStorage(t *testing.T) {
//
//		// make and configure a mocked tgspam.UserStorage
//		mockedUserStorage := &UserStorageMock{
//			DeleteFunc: func(id string) error {
//				panic("mock out the Delete method")
//			},
//			ReadFunc: func() ([]approved.UserInfo, error) {
//				panic("mock out the Read method")
//			},
//			WriteFunc: func(au approved.UserInfo) error {
//				panic("mock out the Write method")
//			},
//		}
//
//		// use mockedUserStorage in code that requires tgspam.UserStorage
//		// and then make assertions.
//
//	}
type UserStorageMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id string) error

	// ReadFunc mocks the Read method.
	ReadFunc func() ([]approved.UserInfo, error)

	// WriteFunc mocks the Write method.
	WriteFunc func(au approved.UserInfo) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID string
		}
		// Read holds details about calls to the Read method.
		Read []struct {
		}
		// Write holds details about calls to the Write method.
		Write []struct {
			// Au is the au argument value.
			Au approved.UserInfo
		}
	}
	lockDelete sync.RWMutex
	lockRead   sync.RWMutex
	lockWrite  sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *UserStorageMock) Delete(id string) error {
	if mock.DeleteFunc == nil {
		panic("UserStorageMock.DeleteFunc: method is nil but UserStorage.Delete was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedUserStorage.DeleteCalls())
func (mock *UserStorageMock) DeleteCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// ResetDeleteCalls reset all the calls that were made to Delete.
func (mock *UserStorageMock) ResetDeleteCalls() {
	mock.lockDelete.Lock()
	mock.calls.Delete = nil
	mock.lockDelete.Unlock()
}

// Read calls ReadFunc.
func (mock *UserStorageMock) Read() ([]approved.UserInfo, error) {
	if mock.ReadFunc == nil {
		panic("UserStorageMock.ReadFunc: method is nil but UserStorage.Read was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc()
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedUserStorage.ReadCalls())
func (mock *UserStorageMock) ReadCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// ResetReadCalls reset all the calls that were made to Read.
func (mock *UserStorageMock) ResetReadCalls() {
	mock.lockRead.Lock()
	mock.calls.Read = nil
	mock.lockRead.Unlock()
}

// Write calls WriteFunc.
func (mock *UserStorageMock) Write(au approved.UserInfo) error {
	if mock.WriteFunc == nil {
		panic("UserStorageMock.WriteFunc: method is nil but UserStorage.Write was just called")
	}
	callInfo := struct {
		Au approved.UserInfo
	}{
		Au: au,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(au)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedUserStorage.WriteCalls())
func (mock *UserStorageMock) WriteCalls() []struct {
	Au approved.UserInfo
} {
	var calls []struct {
		Au approved.UserInfo
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}

// ResetWriteCalls reset all the calls that were made to Write.
func (mock *UserStorageMock) ResetWriteCalls() {
	mock.lockWrite.Lock()
	mock.calls.Write = nil
	mock.lockWrite.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *UserStorageMock) ResetCalls() {
	mock.lockDelete.Lock()
	mock.calls.Delete = nil
	mock.lockDelete.Unlock()

	mock.lockRead.Lock()
	mock.calls.Read = nil
	mock.lockRead.Unlock()

	mock.lockWrite.Lock()
	mock.calls.Write = nil
	mock.lockWrite.Unlock()
}
